---
# tasks file for vm-create
- name: Check if virtual machine exists
  delegate_to: localhost
  community.vmware.vmware_guest_info:
    validate_certs: "{{ validate_certs | default('false') }}"
    hostname: "{{ vcenter_hostname }}"
    username: "{{ your_username }}"
    password: "{{ your_password }}"
    name: "{{ vm_name }}"
    datacenter: "{{ datacenter }}"
  ignore_errors: true
  throttle: 1
  register: vm_exists

- name: Print if virtual machine exists
  delegate_to: localhost
  ignore_errors: true
  ansible.builtin.debug:
    msg: "{{ destructive }} {{ vm_exists }}"
  when: vm_exists is defined

- name: Print if virtual machine does not exists
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "{{ destructive }} {{ vm_exists }}"
  when: vm_exists is not defined
  register: vm_notexists

- name: Print if virtual machine DESTRUCTIVE
  delegate_to: localhost
  ansible.builtin.debug:
    msg: "{{ destructive }} {{ vm_exists }}"
  when: destructive == "True" and vm_exists is defined

- name: Remove virtual machine from inventory
  community.vmware.vmware_guest:
    validate_certs: false
    hostname: "{{ vcenter_hostname }}"
    username: "{{ your_username }}"
    password: "{{ your_password }}"
    name: "{{ vm_name }}"
    datacenter: "{{ datacenter }}"
    state: absent
    state_change_timeout: 120
    force: true
  delegate_to: localhost
  throttle: 1
  when: destructive == "True" and vm_exists is defined
  register: removed_vm

- name: Clone VM from template with dhcp
  community.vmware.vmware_guest:
    validate_certs: "{{ validate_certs | default('false') }}"
    hostname: "{{ vcenter_hostname }}"
    username: "{{ your_username }}"
    password: "{{ your_password }}"
    name: "{{ vm_name }}"
    datacenter: "{{ datacenter }}"
    folder: "{{ vm_folder }}"
    template: "{{ vm_template }}"
    state: poweredon
    annotation: "{{ vm_notes | default('Provisioned by ansible') }}"
    cluster: "{{ cluster }}"
    hardware:
      num_cpus: "{{ vm_cpu }}"
      num_cpu_cores_per_socket: "{{ vm_cpu // 2 | int }}"
      memory_mb: "{{ vm_mem }}"
      hotadd_cpu: "{{ hotadd_cpu }}"
      hotremove_cpu: "{{ hotremove_cpu }}"
      hotadd_memory: "{{ hotadd_mem }}"
    disk:
      - size_gb: "{{ vm_osdisk }}"
        type: "{{ vm_disk_type | default('thin') }}"
        datastore: "{{ vm_datastore }}"
    networks:
      - name: "{{ vm_network }}"
        device_type: "vmxnet3"
        type: dhcp
    wait_for_ip_address: true
  delegate_to: localhost
  register: dynamic_vm
  when: vm_dhcpstatic == 'dhcp'

- name: Clone VM from template with static IP
  community.vmware.vmware_guest:
    validate_certs: "{{ validate_certs | default('false') }}"
    hostname: "{{ vcenter_hostname }}"
    username: "{{ your_username }}"
    password: "{{ your_password }}"
    datacenter: "{{ datacenter }}"
    # customization_spec: "{{ cust_spec }}"
    name: "{{ vm_name }}"
    folder: "{{ vm_folder }}"
    template: "{{ vm_template }}"
    state: powered-on
    annotation: "{{ vm_notes | default('Provisioned by ansible') }}"
    cluster: "{{ cluster }}"
    hardware:
      num_cpus: "{{ vm_cpu }}"
      num_cpu_cores_per_socket: "{{ vm_cpu // 2 | int }}"
      memory_mb: "{{ vm_mem }}"
      hotadd_cpu: "{{ hotadd_cpu }}"
      hotremove_cpu: "{{ hotremove_cpu }}"
      hotadd_memory: "{{ hotadd_mem }}"
    disk:
      - size_gb: "{{ vm_osdisk }}"
        type: "{{ vm_disk_type | default('thin') }}"
        datastore: "{{ vm_datastore }}"
    advanced_settings:
      - key: "time.synchronize.allow"
        value: "FALSE"
      - key: "time.synchronize.allowusb_xhci.present"
        value: "FALSE"
      - key: "tools.guest.desktop.autolock"
        value: "TRUE"
      - key: "usb_xhci.present"
        value: "FALSE"
      - key: "tools.syncTime"
        value: "FALSE"
    networks:
      - name: "{{ vm_network }}"
        connected: true
        start_connected: true
        device_type: "vmxnet3"
        type: static
        ip: "{{ vm_ip }}"
        netmask: "{{ netmask | default('255.255.255.0') }}"
        gateway: "{{ vm_gateway }}"
        dns_servers:
          - "{{ dnsserver1 }}"
          - "{{ dnsserver2 }}"
    customization:
      autologon: true
      autologoncount: 3
      password: "{{ local_admin | default('SomedingRando01!') }}"
      dns_servers:
        - "{{ dnsserver1 }}"
        - "{{ dnsserver2 }}"
      domain: "{{ domain }}"
      orgname: "Geographic Solutions Inc"
      fullname: "Geographic Solutions Inc"
      joindomain: "{{ domain }}"
      domainadmin: "{{ your_username }}"
      domainadminpassword: "{{ your_password }}"
      timezone: "{{ timezone }}"
      # runonce:
      #   - net user Administrator {{ local_admin | default('SomedingRando01!') }}
      #   - net user Administrator /ACTIVE:YES /LOGONPASSWORDCHG:NO /EXPIRES:NEVER /PASSWORDREQ:YES
      #   - WMIC USERACCOUNT WHERE "Name='Administrator'" SET PasswordExpires=FALSE
      #   - gpupdate /force
      #   - cscript C:\Windows\System32\slmgr.vbs /ato
      #   - "winrm quickconfig -force"
      #   - 'winrm set winrm/config/service/auth @{Basic="true"}'
      #   - "winrm quickconfig -transport:https -quiet"
      #   - 'winrm set winrm/config @{MaxEnvelopeSizekb="100000"}'
      #   - "netsh advfirewall set allprofiles state off"
      # - '"powershell.exe -ExecutionPolicy Unrestricted -File C:\Windows\Temp\ConfigureRemotingforAnsible.ps1"'
      existing_vm: true
    wait_for_ip_address: true
    wait_for_ip_address_timeout: 600
    wait_for_customization: true
    wait_for_customization_timeout: 600
  register: static_vm
  when: vm_dhcpstatic == 'static'

- name: Copy file to vm
  community.vmware.vmware_guest_file_operation:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ your_username }}"
    password: "{{ your_password }}"
    validate_certs: false
    vm_id: "{{ vm_name }}"
    datacenter: "{{ datacenter }}"
    cluster: "{{ cluster }}"
    folder: "{{ vm_folder }}"
    vm_username: "Administrator"
    vm_password: "{{ local_admin | default('SomedingRando01!') }}"
    copy:
      src: "roles/files/setup.ps1"
      dest: C:\Temp\setup.ps1
      overwrite: true
    retries: 1
    delay: 3
  when: static_vm is defined

- name: Run the Powershell script to generate a new cert and enable 5986 port in firewall
  community.vmware.vmware_vm_shell:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ your_username }}"
    password: "{{ your_password }}"
    datacenter: "{{ datacenter }}"
    cluster: "{{ cluster }}"
    folder: "{{ vm_folder }}"
    vm_id: "{{ vm_name }}"
    validate_certs: false
    vm_username: "Administrator"
    vm_password: "{{ local_admin | default('SomedingRando01!') }}"
    vm_shell: 'C:\Windows\System32\WindowsPowershell\v1.0\powershell.exe'
    vm_shell_args: '-ExecutionPolicy Unrestricted -File C:\Temp\setup.ps1'
    wait_for_process: true
    retries: 1
    delay: 3
  when: static_vm is defined

---
- name: Create a VM from a template
  hosts: localhost
  gather_facts: false

  #roles:
  #  - vm-create

  post_tasks:
    - name: Add current VM to host
      ansible.builtin.add_host:
        name: "{{ vm_name }}.{{ domain }}"
        ansible_connection: winrm
        ansible_winrm_transport: kerberos
        ansible_port: 5985
        groups: created_vm

- name: Create a VM from a template
  hosts: created_vm
  vars:
    domain_upper: "{{ your_username.split('@')[1] | upper }}"
    user_name: "{{ your_username.split('@')[0] | lower }}"
    ansible_user: "{{ user_name }}@{{ domain_upper }}"
    ansible_password: "{{ your_password }}"

    #ansible_winrm_kerberos_delegation: true
  tasks:
    # - name: Ensure windows host is reachable
    #   ansible.windows.win_ping:

    # - name: Stop Windows Update service
    #   ansible.windows.win_service:
    #     name: wuauserv
    #     state: stopped

    - name: Windows Update - Get WSUS server
      ansible.windows.win_reg_stat:
        path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate
        name: WUServer
      register: wsus_url

    - name: Print wsus_url
      ignore_errors: true
      vars:
        - proto_port: "{{ wsus_url.value.split('//')[1]  }}"
        - wsus_port: "{{ proto_port.split(':')[1]  }}"
        - wsus_proto: "{{ wsus_url.value.split(':')[0]  }}"
        - wsus_server: "{{ proto_port.split(':')[0]  }}"
      ansible.builtin.debug:
        msg:
          - "{{ proto_port }}"
          - "{{ wsus_proto }}"
          - "{{ wsus_server }}"
          - "{{ wsus_port }}"
      when:
        - wsus_url is defined

    - name: Windows Update - Get WSUS server
      ansible.windows.win_shell: |
        $null = Remove-Item "$env:SystemRoot\SoftwareDistribution" -Recurse -Force -ErrorAction SilentlyContinue
        return 0egb
    # - name: Windows Update - Remove AccountDomainSid
    #   ansible.windows.win_regedit:
    #     path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
    #     name: AccountDomainSid
    #     state: absent

    # - name: Windows Update - Remove PingID
    #   ansible.windows.win_regedit:
    #     path: HKLM:\\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
    #     name: PingID
    #     state: absent

    # - name: Windows Update - Remove SusClientId
    #   ansible.windows.win_regedit:
    #     path: HKLM:\\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
    #     name: SusClientId
    #     state: absent

    # - name: Windows Update - Remove SusClientIDValidation
    #   ansible.windows.win_regedit:
    #     path: HKLM:\\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
    #     name: SusClientIDValidation
    #     state: absent

    # - name: Install the Visual C thingy
    #   ansible.windows.win_package:
    #     path: https://aka.ms/vs/17/release/vc_redist.x64.exe
    #     product_id: "{59CED48F-EBFE-480C-8A38-FC079C2BEC0F}"
    #     arguments: /install /passive /norestart
    #     state: present

    # - name: Install the Visual C thingy
    #   ansible.windows.win_package:
    #     path: https://aka.ms/vs/17/release/vc_redist.x86.exe
    #     product_id: "{0C3457A0-3DCE-4A33-BEF0-9B528C557771}"
    #     arguments: /install /passive /norestart
    #     state: present

    - name: Stop Windows Update service
      ansible.windows.win_service:
        name: wuauserv
        state: started

    - name: Windows Update - Get WSUS server
      ansible.windows.win_shell: |
        wuauclt /resetauthorization /detectnow
        (New-Object -ComObject Microsoft.Update.AutoUpdate).DetectNow()

    - name: Windows Update - Get WSUS server
      ansible.windows.win_shell: |
        $UpdateSession = New-Object -ComObject Microsoft.Update.Session
        $UpdateServiceManager = New-Object -ComObject Microsoft.Update.ServiceManager 
        $WsusSearcher = $UpdateSession.CreateUpdateSearcher()
         try { 
        $IsHiddenInstalled = @($WsusSearcher.Search("IsHidden=0 and IsInstalled=0").Update)
        }catch{
        $IsHiddenInstalled = $null
        $PendingMissingUpdates = 'No Pending Updates'
        }
         if($null -ne $IsHiddenInstalled){

            $PendingMissingUpdates =   @($IsHiddenInstalled| ForEach-Object {

        if ($null -ne $_) {

            [pscustomobject]@{
                Date                     = Get-Date -Format "MM-dd-yyyy HH:mm:ss"
                Computername             = $env:ComputerName.ToUpper() 
                Title                    = $_.Title
                Description              = $_.Description
                CveIDs                   = $($_.CveIDs -join ',')
                KB                       = $($_.KBArticleIDs -join ',')
                Severity                 = $_.MsrcSeverity
                LastDeploymentChangeTime = ( $_.LastDeploymentChangeTime ).tostring()
                UninstallationNotes      = $_.UninstallationNotes
                Categories               = $($_.categories).Name -join ', '
                Type                     = $(switch ($_.type) { 1 { 'Software' }2 { 'Driver' } })
                SupportURL               = $_.SupportURL

            }
        }
        })|ConvertTo-JSON
        }
        $PendingUpdates
      register: pending_updates

    - name: Pending Updates
      ignore_errors: true
      ansible.builtin.debug:
        msg:
          - "{{ pending_updates }}"
      when:
        - pending_updates is defined

    # - name: Install all security, critical, and rollup updates without a scheduled task
    # ansible.windows.win_updates:
    #  category_names:
    #    - SecurityUpdates
    #    - CriticalUpdates
    #  state: searched
    #  log_path: C:\Temp\ansible_wu.txt
    #become: true
    #become_method: runas
    #become_flags: logon_type=new_credentials logon_flags=netcredentials_only
    #reboot: true
    #vars:
    #  ansible_connection: psrp
    # ansible_become_method: runas
    #  ansible_become_user: "{{ domain_upper }}\\{{ user_name }}"
    # ansible_become_password: "{{ your_password }}"

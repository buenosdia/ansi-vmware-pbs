---
- name: Create a VM from a template
  hosts: localhost
  gather_facts: false
  vars:
    some_rando_pass: "SomedingRando01!"

  roles:
    - vm-create

  post_tasks:
    - name: Add current VM to host
      ansible.builtin.add_host:
        name: "{{ vm_name }}.{{ domain }}"
        ansible_connection: winrm
        ansible_winrm_transport: kerberos
        ansible_port: 5985
        groups: created_vm

- name: Create a VM from a template
  hosts: created_vm
  vars:
    domain_upper: "{{ your_username.split('@')[1] | upper }}"
    user_name: "{{ your_username.split('@')[0] | lower }}"
    ansible_user: "{{user_name}}@{{domain_upper}}"
    ansible_password: "{{ your_password }}"
    ansible_become: true
    ansible_become_method: runas
    ansible_become_flags: logon_type=interactive
    ansible_become_user: "{{domain_upper}}\\{{user_name}}"
    ansible_become_password: "{{ your_password }}"
    ansible_winrm_kerberos_delegation: true
  tasks:
    - name: Ensure windows host is reachable
      ansible.windows.win_ping:

    - name: Stop Windows Update service
      ansible.windows.win_service:
        name: wuauserv
        state: stopped

    - name: Windows Update - Get WSUS server
      ansible.windows.win_reg_stat:
        path: HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate
        name: WUServer
      register: wsus_url

    - name: Print wsus_url
      ignore_errors: true
      vars:
        - proto_port: "{{ wsus_url.value.split('//')[1]  }}"
        - wsus_port: "{{ proto_port.split(':')[1]  }}"
        - wsus_proto: "{{ wsus_url.value.split(':')[0]  }}"
        - wsus_server: "{{ proto_port.split(':')[0]  }}"

      ansible.builtin.debug:
        msg:
          - "{{ proto_port }}"
          - "{{ wsus_proto }}"
          - "{{ wsus_server }}"
          - "{{ wsus_port }}"
      when:
        - wsus_server is defined

    - name: Windows Update - Get WSUS server
      ansible.windows.win_shell: |
        #whoami.exe /all
        $remove = Remove-Item "$env:SystemRoot\SoftwareDistribution" -Recurse -Force -ErrorAction SilentlyContinue
        $remove

    - name: Windows Update - Remove AccountDomainSid
      ansible.windows.win_regedit:
        path: HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
        name: AccountDomainSid
        state: absent

    - name: Windows Update - Remove PingID
      ansible.windows.win_regedit:
        path: HKLM:\\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
        name: PingID
        state: absent

    - name: Windows Update - Remove SusClientId
      ansible.windows.win_regedit:
        path: HKLM:\\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
        name: SusClientId
        state: absent

    - name: Windows Update - Remove SusClientIDValidation
      ansible.windows.win_regedit:
        path: HKLM:\\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate
        name: SusClientIDValidation
        state: absent

    - name: Install the Visual C thingy
      ansible.windows.win_package:
        path: https://aka.ms/vs/17/release/vc_redist.x64.exe
        product_id: "{59CED48F-EBFE-480C-8A38-FC079C2BEC0F}"
        arguments: /install /passive /norestart
        state: present

    - name: Install the Visual C thingy
      ansible.windows.win_package:
        path: https://aka.ms/vs/17/release/vc_redist.x86.exe
        product_id: "{0C3457A0-3DCE-4A33-BEF0-9B528C557771}"
        arguments: /install /passive /norestart
        state: present

    - name: Stop Windows Update service
      ansible.windows.win_service:
        name: wuauserv
        state: started

    - name: Windows Update - Get WSUS server
      ansible.windows.win_shell: |
        wuauclt /resetauthorization /detectnow
        (New-Object -ComObject Microsoft.Update.AutoUpdate).DetectNow()
      register: detect_now

    - name: Windows Update - Check
      ansible.windows.win_powershell:
        script: |
          try {
              $UpdateSession = New-Object -ComObject Microsoft.Update.Session
              $UpdateSearcher = $UpdateSession.CreateUpdateSearcher()
              $AvailableUpdates = @($UpdateSearcher.Search("IsHidden=0 and IsInstalled=0 and Type != 'Driver'").Updates)
              $DownloadUpDates = New-Object -com "Microsoft.Update.UpdateColl"
              $Date = Get-Date -Format "MM-dd-yyyy hh:mm:ss tt"
              $RebootRequired = (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired" -EA 0) 

              If ($AvailableUpdates.Count -ge 1 -and $RebootRequired -ne $True) {

                  $AllUpdates = Foreach ($AvailableUpdate in $AvailableUpdates) {
                      $null = $AvailableUpdate.AcceptEula()
                      $null = $DownloadUpDates.Add($AvailableUpdate)

                      [pscustomobject]@{
                          Date                     = "$Date"
                          Computername             = "$($env:ComputerName.ToUpper())"
                          Title                    = "$($AvailableUpdate.Title)"
                          Description              = "$($AvailableUpdate.Description)"
                          CveIDs                   = "$(($AvailableUpdate.CveIDs -join ','))"
                          KB                       = "$(($AvailableUpdate.KBArticleIDs -join ','))"
                          Severity                 = "$($AvailableUpdate.MsrcSeverity)"
                          LastDeploymentChangeTime = "$(($AvailableUpdate.LastDeploymentChangeTime ).tostring())"
                          UninstallationNotes      = "$($AvailableUpdate.UninstallationNotes)"
                          Categories               = "$(($AvailableUpdate.categories).Name -join ', ')"
                          Type                     = "$($(switch ($AvailableUpdate.type) { 1 { 'Software' }2 { 'Driver' } }))"
                          SupportURL               = "$($AvailableUpdate.SupportURL)"
                          Downloaded               = $($AvailableUpdate.IsDownloaded)
                          Installed                = $($AvailableUpdate.IsInstalled)
                          RebootRequired           = $($AvailableUpdate.RebootRequired)
                      }

                      if ($AvailableUpdate.RebootRequired -eq $True -and $RebootRequired -eq $False) {
                          $RebootRequired = $True
                      }

                  }

                  $Output = @{UpdateCount = $AllUpdates.Count; Updates = $AllUpdates; RebootRequired = $RebootRequired } | ConvertTo-Json  -Depth 4

                  $Downloader = $UpdateSession.CreateUpdateDownloader()
                  $Downloader.Updates = $DownloadUpDates
                  $Downloading = ($Downloader.Download())

                  $Installer = New-Object -ComObject Microsoft.Update.Installer
                  $Installer.Updates = $DownloadUpDates
                            
                  $Installing = ($Installer.Install())

                  if (Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired") {

                      $RebootRequired = $True

                  }
                            
                  $Output=@{UpdateCount=$DownloadUpDates.Count;Updates=$AllUpdates;RebootRequired=$RebootRequired}|ConvertTo-Json
              }
              ELSE {

                  $Output=@{UpdateCount=$AvailableUpdates.Count;Updates=$AvailableUpdates;RebootRequired=$RebootRequired } | ConvertTo-Json

              }

              $Output

          }
          catch {

                        ($Error[0] | Select * | ConvertTo-Json -depth 4)
          }
        arguments:
          - -ExecutionPolicy
          - Bypass
      register: updates_installed

    - name: Windows Update - Installed
      ignore_errors: true
      ansible.builtin.debug:
        msg:
          - "{{ updates_installed }}"
          - "Reboot required: {{ updates_installed.output }}"

    # - name: Pending Updates
    #   ignore_errors: true
    #   ansible.builtin.debug:
    #     msg:
    #       - "{{ pending_updates.output }}"
    #   when:
    #     - pending_updates is defined
